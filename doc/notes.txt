Artificial Intelligence. Initial Notes
6 March 2015
------------------------------------

Idea
---
Definitions

CLASS
	name	id
	RULE    rules[]	// List of rules associated to the class

FACTS
	name	 id	  // Fact ID
	INSTANCE i[]	  // List of instances associated to the fact
	value    [T,F,?]  // Fact Value (? probably is not required)

INSTANCE
	name	id	// Not sure if required
	CLASS	class	// Class of the instance
	FACT    facts[] // List of Facts associated to the instance

RULE
	name	id	// Rule id
	FACT	lval	// Lvalue
	Func    rval    // Rval evaluation


Implement data structures in C and implement rules in Python as functions called from C. An API to access the data strcutures from Python should be created.


Family Tree Example with PseudoCode

CLASS person	    // Creates a class person that can hold rules

person (John)	    // Creates an instance of class person named John
person (Sarah)
person (Albert)

person?		    // List Persons

FACTS
F1: Albert IS_CHILD_OF John	-> IS_CHILD_OF (Albert,John) -> T
F2: Albert IS_A_MALE 	-> IS_MALE (Albert) -> T

RULE
R1: X IS_SON_OF Y -> IS_MALE(X) and IS_CHILD_OF(X,Y)
R2: X IS_FATHER_OF Y -> IS_MALE(X) and IS_CHILD_OF(Y,X)
R3: X IS_MOTHER_OF Y -> IS_FEMALE(X) and IS_CHILD_OF(Y,X)
R4: X IS_CHILD_OF Y -> IS_PARENT_OF (Y,X)
R5: X IS_PARENT_OF Y -> Y IS_CHILD_OF X


Execution
R4 is fired by F1

albert IS_SON_OF John?   (Query.... retrieve values)

1. IS_SON_OF (Albert, John) -> ?
2. R1 (Albert IS_SON_OF John -> IS_MALE(Albert) and IS_CHILD_OF (Albert, John)
               ?             ->    T            and      T   -> T
// Only rule 1 is directly fired... we keep going evaluating the rules to complete as much as possible
3. R2 (John IS_FATHER_OF Albert) -> IS_MALE(John) and IS_CHILD_OF (John, Albert)
              ?                         ?                   T
4. R5 (John IS_PARENT_OF Albert) -> IS_CHILD_OF(Albert, John)
               ?                  ->  T -> T



Sarah IS_MOTHER_OF Albert (Assignment..... set values)

1. IS_MOTHER_OF(Sarah, Albert) -> T
2. R3 (Sarah IS_MOTHER_OF Albert) -> IS_FEMALE(Sarah) and IS_CHILD_OF(Albert,Sarah)
               T                  ->    set (T)             and     set(T)  
3. R4 (Albert IS_CHILD_OF Sarah)  -> IS_PARENT_OF (Sarah,Albert)
             T                    ->    set (T)
4. R5 (Sarah IS_PARENT_OF Albert) -> IS_CHILD_OF (Albert, Sarah)
             T                    ->    T

FACT Evolution:
Albert:
	IS_CHILD_OF(Albert, John)
	IS_MALE (Albert)

After execution
John: 
*      IS_PARENT_OF (Albert)

Sarah      
*      IS_PARENT_OF (Sarah, Albert)
      IS_MOTHER_OF (Sarah, Albert)
*      IS_FEMALE    (Sarah)

Albert:
	IS_CHILD_OF (Albert, John)
*	IS_CHILD_OF (Albert, Sarah)
	IS_MALE (Albert)
*	IS_SON_OF (Albert, John)
*	IS_SON_OF (Albert, Sarah)   // No rule to fire this

(* new generated facts)
To derive gender and father predicate on John we need more information or qualifiers on the Rules (if John is a parent and exist a mother)

----------------------------------------------------
IDEAS
----------------------------------------------------
Create datasets clones and set unknown facts to a given value.
Run the rules and try to find contradictions. That will assess FACT values (Ad absurdum reduction)

We need a proper way to fire rules

helper function to create complementary facts and associated rules


References
--
PROLOG
http://en.wikipedia.org/wiki/Prolog
http://en.wikibooks.org/wiki/Prolog
http://en.wikipedia.org/wiki/First-order_logic
http://en.wikipedia.org/wiki/Horn_clause
http://en.wikipedia.org/wiki/SLD_resolution

JESS
http://www.jessrules.com/jess/docs/71/
http://www.jessrules.com/jess/docs/index.shtml
http://www.jessrules.com/jess/docs/71/rete.html#
